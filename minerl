#!/usr/bin/perl -w
use strict;
use warnings;
package Minerl::BaseObject;

sub new {
    my ($class, %args) = @_;

    my $self = bless {}, ref($class) || $class;

    $self->_init(%args);

    return $self;
}

sub _init {
    my ($self, %args) = @_;
    while (my ($key, $value) = each (%args)) {
        $self->{$key} = $value; 
    }
}

1;
package Minerl::Formatter::Markdown;
{
my $instance;
my $markdownInstance;

sub new {
    my $class = shift;

    if (!$instance) {
        $instance = bless {}, $class;

        my $useStr = "use Text::MultiMarkdown;";
        eval($useStr);
        $instance->{"available"} = !$@;

        $markdownInstance = Text::MultiMarkdown->new(
            empty_element_suffix => '>',
            tab_width => 4,
            use_wikilinks => 1,
        ) if !$@;
    }

    warn "Warning: Text::MultiMarkdown is not installed, Markdown text will not be parsed." if !$instance->{"available"};

    return $instance;
}

sub format { 
    my ($self, $content) = @_;
    return $markdownInstance ? $markdownInstance->markdown($$content) : $$content;
}

1;
}
package Minerl::Formatter::Perl;
{

my $instance;

sub new {
    my $class = shift;

    if (!$instance) {
        $instance = bless {}, $class;

        my $useStr = "use Text::Template;";
        eval($useStr);
        $instance->{"available"} = !$@;
    }

    return $instance;
}

sub format { 
    my ($self, $content, $data) = @_;

    if ($self->{"available"}) {
        my $txtTmpl = Text::Template->new(
            TYPE => "STRING",
            SOURCE => $$content,
            DELIMITERS => [ "{{", "}}" ]
        ); 

        return $txtTmpl->fill_in( HASH => $data );
    }
    return $$content;
}

1;
}
package Minerl::Page;

=head1 
    Page is an abstraction of the content of a file that
    is composed of a header section and a content section.
=cut

our @ISA = qw(Minerl::BaseObject);

use File::Basename;

sub new {
    my ($class, @args) = @_;
    my $self = $class->SUPER::new(@args);

    my $filename = $self->{"filename"};

    die "Must pass in filename of the page." if !$filename;
    Minerl::Util::parsePageFile($filename, $self);
   
    return $self;
}

sub header {
    my ($self, $key) = @_;
    return $self->{"headers"}->{$key};
}

sub headers {
    my ($self) = @_;
    return $self->{"headers"};
}

sub content {
    my ($self, $limit) = @_;
    if (!$limit) {
        return \$self->{"content"};
    } else {
        my $content = \$self->{"content"};
        if (length $$content > $limit) {
            return \substr($$content, 0, $limit);
        }
        return $content;
    }
}

sub applyFormatter {
    my ($self, $formatter) = @_;
    $self->{"content"} = $formatter->format( \$self->{"content"}, $self->headers() );
}

sub formats {
    my ($self) = @_;
    my $formatHeader = $self->header("format");

    return $formatHeader ? [split "[ \t]*,[ \t]*", $formatHeader] : undef;
}

sub ctxVars {
    my ($self, $ctxVars) = @_;
    $self->{"ctx_vars"} = $ctxVars if $ctxVars;
    return $self->{"ctx_vars"};
}

sub ctxVar {
    my ($self, $key) = @_;
    return $self->ctxVar($key);
}

sub outputFilename {
    my ($self, $designatedName) = @_;

    my $outputFilename = $self->{"output_filename"};
    return $outputFilename if $outputFilename;

    $outputFilename = $self->{"filename"};

    # strip the first dirname, which is the root directory of
    # the page
    $outputFilename =~ s|^[^/]*/||g;    

    my $dir = dirname($outputFilename);

    if ($designatedName) {
        if ($dir) {
            return "$dir/$designatedName";
        } else {
            return $designatedName;
        }
    } else {
        my $slug = $self->header("slug");
        if ($slug && $dir ne ".") {
            $slug = "$dir/$slug";
        }
        return $slug if $slug;

        $outputFilename = lc $self->header("title");
        die "Post does not contain a title header: " . $self->{"filename"} if !$outputFilename;

        $outputFilename =~ s/[^a-z]/ /g;
        $outputFilename =~ s/^[ \t]+//g;         # trim left
        $outputFilename =~ s/[ \t]+$//g;         # trim right
        $outputFilename =~ s/[ \t]+/-/g;         # replace all whitespaces with dashes

        $outputFilename = $outputFilename . ".html";
        $outputFilename = "$dir/$outputFilename" if $dir ne ".";
    }

    return $self->{"output_filename"} = $outputFilename;
}

1;
package Minerl::PageManager;

our @ISA = qw(Minerl::BaseObject);

use File::Basename;
use File::Find qw(find);
use File::stat;
use POSIX;

sub new {
    my ($class, @args) = @_;
    my $self = $class->SUPER::new(@args);

    my $pageDir = $self->{"page_dir"};
    my $pageSuffixRegex = $self->{"page_suffix_regex"};

    $self->_initPages($pageDir, $pageSuffixRegex);
   
    return $self;
}

sub _initPages {
    my ($self, $pageDir, $pageSuffixRegex) = @_;

    my $pageArr = $self->{"pages"} = [];

    my @postArr;

    die "$pageDir: Directory does not exist." if !-d $pageDir;

    my $taggedPosts = $self->{"tagged_posts"} = {};
    my $archivedPosts = $self->{"archived_posts"} = {};

    # this hash is used to sort the date 
    my $archivedMonths = $self->{"archived_months"} = {};

    find( { wanted => sub {
        if ( -f $_ ) {
            return if $_ !~ /$pageSuffixRegex/;

            #print "found page file: $pageDir/$filename\n" if $self->{"DEBUG"};

            # basename without suffix
            my ($name) = basename($_) =~ /([^.]+)/;
            my $page = new Minerl::Page( filename => $_, name => $name );

            my $formats = $page->formats();
            map { 
                my $formatter = $self->_obtainFormatter($_);
                $page->applyFormatter($formatter) if $formatter 
            } @$formats if $formats;

            die "$_: 'layout' header is not specified." if !$page->header("layout");

            push @$pageArr, $page;

            my $pageType = $page->header("type");
            if ($pageType && $pageType eq "post") {

                my @postTags;

                my @tags;
                if ($page->header("tags")) {
                    @tags = split /[ \t]*,[ \t]*/, $page->header("tags");
                    @tags = grep { $_ } @tags;

                    foreach my $t (@tags) {
                        push @postTags, { __minerl_tag_name => $t, __minerl_tag_link => "/tags/$t.html" };
                    }
                }

                $page->{"headers"}->{"timestamp"} = stat($_)->ctime if !$page->header("timestamp");

                my $post= {
                    __post_timestamp => $page->header("timestamp"),   # this is for sorting
                    __post_title => $page->header("title"),
                    __post_link => "/" . $page->outputFilename(),
                    __post_createdate => POSIX::strftime("%b %d, %Y", localtime($page->header("timestamp"))),
                    __post_createtime => POSIX::strftime("%I:%M %p", localtime($page->header("timestamp"))),
                    __post_tags => \@postTags,
                    __post_content => ${$page->content()},
                    __post_excerpt => ${$page->content(150)},
                };

                $page->ctxVars($post);

                push @postArr, $post;

                # categorize the posts by tags
                foreach my $t (@tags) {
                    $t = lc $t;

                    my $postsByTag = $taggedPosts->{$t};
                    if (!$postsByTag) {
                        push @$postsByTag, $post;
                        $taggedPosts->{$t} = $postsByTag;
                    } else {
                        push @$postsByTag, $post;
                    }
                }

                my $monthAsKey = POSIX::strftime("%b, %Y", localtime($page->header("timestamp")));
                $archivedMonths->{$monthAsKey} = POSIX::strftime("%Y/%m", localtime($page->header("timestamp")));
                my $postsByMonth = $archivedPosts->{$monthAsKey};
                if (!$postsByMonth) {
                    push @$postsByMonth, $post;
                    $archivedPosts->{$monthAsKey} = $postsByMonth;
                } else {
                    push @$postsByMonth, $post;
                }

            }
        }
    }, no_chdir => 1 }, ($pageDir) ); 

    @postArr = sort { $b->{"__post_timestamp"} <=> $a->{"__post_timestamp"} } @postArr;
    $self->{"posts"} = \@postArr;

    #$self->_formatPages($pageArr);
}

#sub _formatPages {
    #my ($self, $pageArr) = @_;

    #foreach my $page (@$pageArr) {
        #my $formats = $page->formats();
        #map { 
             #my $formatter = $self->_obtainFormatter($_);
             #$page->applyFormatter($formatter) if $formatter 
        #} @$formats if $formats;
    #}
#}

sub _obtainFormatter {
    my ($self, $name) = @_;
    my $formatterHash = $self->{"formatters"};
    if (!$formatterHash) {
        $formatterHash->{"markdown"} = return new Minerl::Formatter::Markdown();
        $formatterHash->{"perl"} = return new Minerl::Formatter::Perl();
    }

    if (defined $formatterHash->{$name}) {
        return $formatterHash->{$name};
    } else {
        warn "formatter not supported: $name"
    }
}

sub pages {
    my ($self) = @_;
    return $self->{"pages"};
}

sub posts {
    my ($self, $limit) = @_;
    if (!$limit) {
        return $self->{"posts"};
    } else {
        my $posts = $self->{"posts"}; 
        if (scalar @$posts > $limit) {
            my @slice = @$posts[0..$limit-1]; 
            return \@slice;
        }
        return $posts;
    }
}

sub tags {
    my ($self) = @_;
    my $taggedPosts = $self->{"tagged_posts"};
    my @keys = keys %$taggedPosts if $taggedPosts;
    return \@keys;
}

sub postsByTag {
    my ($self, $tag) = @_;
    my $taggedPosts = $self->{"tagged_posts"};
    return $taggedPosts ? $taggedPosts->{$tag} : undef;
}

sub postTags {
    my ($self) = @_;
    my $taggedPosts = $self->{"tagged_posts"};

    my @postTags;
    while (my ($tag, $posts) = each %$taggedPosts) {
        my $count = @$posts;
        push @postTags, { __minerl_tag => $tag, __minerl_post_count => $count };    
    }

    @postTags = sort { $a->{"__minerl_tag"} cmp $b->{"__minerl_tag"} } @postTags;

    return \@postTags;
}

# months during which some blog entries were created
sub months {
    my ($self) = @_;
    my $archivedPosts = $self->{"archived_posts"};
    my @keys = keys %$archivedPosts if $archivedPosts;
    return \@keys;
}

sub monthLink {
    my ($self, $month) = @_;
    return $self->{"archived_months"}->{$month};
}

sub postsByMonth {
    my ($self, $month) = @_;
    my $archivedPosts = $self->{"archived_posts"};
    return $archivedPosts ? $archivedPosts->{$month} : undef;
}

# months during which some blog entries were created
sub postMonths {
    my ($self) = @_;
    my $archivedPosts = $self->{"archived_posts"};

    my $archivedMonths = $self->{"archived_months"};

    my @months;
    while (my ($month, $posts) = each %$archivedPosts) {
        my $count = @$posts;
        # format: "June, 2013", "2013/06", "12"
        push @months, { __minerl_month_display => $month, __minerl_month_link => $archivedMonths->{$month},  __minerl_post_count => $count };    
    }

    @months = sort { $a->{"__minerl_month_link"} cmp $b->{"__minerl_month_link"} } @months;

    return \@months;
}

1;
package Minerl::Template;

use HTML::Template;
our @ISA = qw(Minerl::Page);

sub build {
    my ($self) = @_; 
    $self->{"template"} = HTML::Template->new_scalar_ref($self->content, die_on_bad_params => 0, loop_context_vars => 1);
}

sub apply {
    my ($self, $content, $options) = @_; 

    my $tmpl = $self->{"template"};   

    if (!$tmpl) {
        die "Template '" . $self->{"name"} . "' not prepared, call build() first.";
    }

    $tmpl->clear_params();

    if (ref($options) eq "HASH") {
        $tmpl->param($options);
    } elsif (ref($options) eq "ARRAY") {
        foreach my $option (@$options) {
            if (ref($option) eq "HASH") {
                $tmpl->param($option);
            }
        }
    }
    $tmpl->param( content => $$content );


    return \$tmpl->output(); 
}

sub built {
    my ($self) = @_; 
    return $self->{"template"} ? 1 : undef;
}

1;
package Minerl::TemplateManager;

our @ISA = qw(Minerl::BaseObject);

use File::Basename;

sub new {
    my ($class, @args) = @_;
    my $self = $class->SUPER::new(@args);

    my $templateDir = $self->{"template_dir"};
    my $templateSuffix = $self->{"template_suffix"};

    $self->_initTemplates($templateDir, $templateSuffix);
   
    return $self;
}

sub _initTemplates {
    my ($self, $templateDir, $templateSuffix) = @_;

    -d $templateDir or die "$templateDir: $!";
    my @files = glob($templateDir . "/*" . $templateSuffix);

    my $tmplHashes = $self->{"templates"} = {};

    foreach my $filename (@files) {
        #print "found template file: $filename\n" if $self->{"DEBUG"};

        # basename without suffix
        my ($name) = basename($filename) =~ /([^.]+)/;
        $tmplHashes->{$name} = new Minerl::Template( filename => $filename, name => $name );
    }
    
    while (my ($tmplName, $tmpl) = each %$tmplHashes) {
        next if $tmpl->built();
        $tmpl->build();
    }
}

sub applyTemplate {
    my ($self, $tmplName, $content, $options) = @_;

    $content = $self->_applyTemplateRecursively($tmplName, $content, $options);

    return $self->_prettyPrintAvailable ? $self->_prettyPrint($content) : $content;
}

sub _applyTemplateRecursively {
    my ($self, $tmplName, $content, $options) = @_;

    my $tmpl = $self->{"templates"}->{$tmplName};
    die "Template not found: $tmplName" if !$tmpl;

    $content = $tmpl->apply($content, $options);
    my $baseTmplName = $tmpl->header("layout");
    if ($baseTmplName) {
        return $self->_applyTemplateRecursively($baseTmplName, $content, $options);
    } 
    return $content;
}

sub _prettyPrintAvailable {
    my ($self) = @_;
    return 0;

    my $useStr = "
        use HTML::HTML5::Parser qw();
        use HTML::HTML5::Writer qw();
        use XML::LibXML::PrettyPrint qw();
    ";

    eval($useStr);

    return $@ ? undef : 1;
}

sub _prettyPrint {
    my ($self, $content) = @_;

    return \(HTML::HTML5::Writer->new(
        start_tags => 'force',
        end_tags => 'force', 
    )->document(
        XML::LibXML::PrettyPrint->new_for_html(
            indent_string => "\t"
        )->pretty_print(
            HTML::HTML5::Parser->new->parse_string( $content )
        )
    ));
}

1;
package Minerl::Util;

require Exporter;
our @ISA = qw(Exporter);
our @EXPORT = qw(parsePageFile);
our @EXPORT_OK = qw(parsePageFile);

use File::Basename;

use constant {
    PAGE_PREREAD => 1,
    PAGE_READ_HEADER => 2,
    PAGE_READ_CONTENT => 3 
};

# this subroutine parses file that is composed of a 
# header section and content section
sub parsePageFile {
    my ($filename, $hash) = @_;

    $hash = $hash || {};
    my $content = "";
    my $state = PAGE_PREREAD;
    open FILE, "<:utf8", $filename;
    while (my $line = <FILE>) {

        if ($line =~ /^-{3,}$/) {
            if ($state == PAGE_PREREAD) {
                $state = PAGE_READ_HEADER;
                next; # ignore the dashed line
            }
            if ($state == PAGE_READ_HEADER) {
                $state = PAGE_READ_CONTENT;
                next; # ignore the dashed line
            }
        } elsif ($state == PAGE_PREREAD && $line !~ /^-{3,}$/) {
            $state = PAGE_READ_CONTENT;
        }

        if ($state == PAGE_READ_HEADER) {
            # strip leading white spaces
            $line =~ s/^[ \t]+//g;

            # skip comments
            next if $line =~ /^#/;

            # strip trailing white spaces
            $line =~ s/[ \t\n]+$//g;
            my ($key, $value) = $line =~ '^([^:]+):[ \t]*(.*)$';
            $hash->{"headers"}->{$key} = $value;
        } elsif ($state == PAGE_READ_CONTENT) {
            $content .= $line; 
        }
    } 

    $hash->{"content"} = $content;

    die "$filename: Header section is not closed." if $state == PAGE_READ_HEADER;
    close(FILE);

    return $hash;
}

1;
=head1 NAME

minerl - A static site generator written in Perl

=cut

our $VERSION = '0.01';

=head1 SYNOPSIS

    use minerl;
    my $minerl = new minerl( cfg_file => "minerl.cfg" ); 
    minerl->build();
    ...

=head1 AUTHOR

neevek, C<< <i at neevek.net> >>

=head1 LICENSE AND COPYRIGHT

Copyright 2013 neevek.

This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:

L<http://www.perlfoundation.org/artistic_license_2_0>

Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.

If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.

This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.

This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.

Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=cut

package minerl;
use encoding "utf-8";

our $VERSION = '0.01';

our @ISA = qw(Minerl::BaseObject);

use Config::IniFiles;
use File::Path qw(make_path);
use File::Find qw(find);
use File::Copy qw(copy); 
use File::Basename qw(dirname); 

=head1 SUBROUTINES/METHODS

=head2 new 

The constructor, which creates the minerl object.
An ini config file is required to initialize the object.

=cut

sub new {
    my ($class, @args) = @_;
    my $self = $class->SUPER::new(@args);

    $self->_initConfigFile();

    return $self;
}

sub _initConfigFile {
    my ($self) = @_;

    my $cfgFile = $self->{"cfg_file"};
    -f $cfgFile or die "$cfgFile not found.";

    tie my %cfg, 'Config::IniFiles', ( -file => $cfgFile );

    $cfg{"system"} = {} if !$cfg{"system"};
    $cfg{"system"}->{"output_dir"} = "out" if !$cfg{"system"}->{"output_dir"};
    $cfg{"system"}->{"raw_dir"} = "raw" if !$cfg{"system"}->{"raw_dir"};
    $cfg{"system"}->{"page_dir"} = "pages" if !$cfg{"system"}->{"page_dir"};
    $cfg{"system"}->{"page_suffix_regex"} = "\\.(?:md|markdown|html)\$" if !$cfg{"system"}->{"page_suffix_regex"};
    $cfg{"system"}->{"template_dir"} = "templates" if !$cfg{"system"}->{"template_dir"};
    $cfg{"system"}->{"template_suffix"} = ".html" if !$cfg{"system"}->{"template_suffix"};
    $cfg{"system"}->{"recent_posts_limit"} = 5 if !$cfg{"system"}->{"recent_posts_limit"};

    $cfg{"template"} = {} if !$cfg{"template"};

    $self->{"cfg"} = \%cfg;
}

sub _generatePages {
    my ($self) = @_;

    my $cfg = $self->{"cfg"};
    my $pageDir = $cfg->{"system"}->{"page_dir"};
    -d $pageDir or die "$pageDir does not exist.";

    my $templateDir = $cfg->{"system"}->{"template_dir"};
    -d $templateDir or die "$templateDir does not exist.";

    my $outputDir = $cfg->{"system"}->{"output_dir"};
    make_path($outputDir, { mode => 0755 });

    my $templateSuffix = $cfg->{"system"}->{"template_suffix"};
    my $pageSuffixRegex = $cfg->{"system"}->{"page_suffix_regex"};

    my $tm = new Minerl::TemplateManager(template_dir => $templateDir, template_suffix => $templateSuffix);
    my $pm = new Minerl::PageManager( page_dir => $pageDir, page_suffix_regex => $pageSuffixRegex); 

    my $postTags = $pm->postTags();
    my $postMonths = $pm->postMonths();

    my $pages = $pm->pages();
    foreach my $page (@$pages) {
        my $type = $page->header("type");
        if ($type && $type eq "taglist") {
            my $tags = $pm->tags();
            foreach my $tag (@$tags) {
                my $postsByTag = $pm->postsByTag($tag); 

                my $html = $tm->applyTemplate($page->header("layout"), $page->content
                    , [$cfg->{"template"}, $page->headers, { __minerl_all_posts => $pm->posts()
                    , __minerl_recent_posts => $pm->posts($cfg->{"system"}->{"recent_posts_limit"})
                    , __minerl_tagged_posts => $postsByTag , __minerl_cur_tag => $tag, "__minerl_all_tags" => $postTags, "__minerl_archived_months" => $postMonths } ]);

                # Pages of 'taglist' type are restricted to be output to "$output_dir/tags/"
                my $destFile = "$outputDir/tags/$tag.html";
                $self->_writePageFile($outputDir, $destFile, $html);
            } 
        } elsif ($type && $type eq "archive") {
            my $months = $pm->months();
            foreach my $month (@$months) {
                my $postsByMonth = $pm->postsByMonth($month); 

                my $html = $tm->applyTemplate($page->header("layout"), $page->content
                    , [$cfg->{"template"}, $page->headers, { __minerl_all_posts => $pm->posts()
                    , __minerl_recent_posts => $pm->posts($cfg->{"system"}->{"recent_posts_limit"})
                    , __minerl_archived_posts => $postsByMonth, __minerl_cur_month => $month, "__minerl_all_tags" => $postTags, "__minerl_archived_months" => $postMonths } ]);

                # Pages of 'archive' type are restricted to be output to "$output_dir/archives/"
                my $destFile = "$outputDir/archives/" . $pm->monthLink($month) . ".html";
                $self->_writePageFile($outputDir, $destFile, $html);
            } 
        } else {
            my $html = $tm->applyTemplate($page->header("layout"), $page->content, [$cfg->{"template"}, $page->headers, $page->ctxVars,
                    , { __minerl_all_posts => $pm->posts(), __minerl_recent_posts => $pm->posts($cfg->{"system"}->{"recent_posts_limit"})
                    , "__minerl_all_tags" => $postTags, "__minerl_archived_months" => $postMonths } ]);
            my $destFile = "$outputDir/" . $page->outputFilename();
            $self->_writePageFile($outputDir, $destFile, $html);
        }
    }
}

sub _writePageFile {
    my ($self, $outputDir, $destFile, $html) = @_;

    my $outputSubDir = dirname($destFile);
    make_path($outputSubDir, { mode => 0755 }) if !-d $outputSubDir;

    open my $fh, ">:utf8", $destFile or die "Failed to write to '$destFile' - $!";
    binmode($fh, ":utf8");
    print $fh $$html;
    close $fh;
}

sub _copyRawResources {
    my ($self) = @_;

    my $cfg = $self->{"cfg"};
    my $rawDir = $cfg->{"system"}->{"raw_dir"};
    
    # if there's nothing to copy
    return if !-d $rawDir;

    my $outputDir = $cfg->{"system"}->{"output_dir"};

    find( { wanted => sub {
        if ( -d $_ ) {
            s|$rawDir||; # strip the first directory
            make_path ("$outputDir/" . $_, { mode => 0755 });
        } elsif ( -f $_ ) {
            my $srcFile = $_;
            s|$rawDir|$outputDir|;
            copy ($srcFile, $_);
        }
    }, no_chdir => 1 }, ($rawDir) ); 
}

sub build {
    my ($self) = @_;

    $self->_generatePages();
    $self->_copyRawResources();
}

1;
package main;
use strict;
use warnings;
use 5.10.0;

use Getopt::Compact::WithCmd;

my $go = Getopt::Compact::WithCmd->new(
    command_struct => {
       "build" => {
            options        => [[[qw(r rebuild)], qq(Rebuild all the pages.), "!", { default => 0}]],
            args           => "",
            desc           => "- Appllies the pages on the templates, generates the final HTML pages.",
            other_usage    => ""
        },  
       "serve" => {
            options        => [[[qw(p port)], qq(The port which the HTTP server uses to accept requests), "=i", undef, { required => 1, default => 8888 }]],
            args           => "[port]",
            desc           => "- Starts an HTTP server to serve the directory specified by the 'output_dir' property in minerl.cfg.",
            other_usage    => ""
        },  
       "createblog" => {
            options        => [[[qw(f filename)], qq(File name of the page), "=s", undef, { required => 1 }],
                               [[qw(l layout)], qq(Layout on which the newly created page is to be applied), "=s", undef, { required => 1 }],
                               [[qw(m format)], qq(Format of the page, currently supports 'markdown, perl'), ":s", undef, { required => 1, default => "markdown, perl" }],
                               [[qw(g tags)], qq(Tags for the blog, separated by commas), ":s", undef, { required => 1, default => "uncategorized" }],
                               [[qw(t title)], qq(Title of the blog), ":s", undef, { required => 1, default => "untitled" }],
                                ],
            args           => "-f <filename> -l <layout> -m [format] -t [title]",
            desc           => "- Creates the skeleton for starting a new blog entry.",
            other_usage    => ""
        },  
    },  
);

my $command = $go->command;
my $opts = $go->opts;
$go->show_usage if !$command;

my $minerl = new minerl( cfg_file => "minerl.cfg" ); 

given ($command) {
    when("build") { 
        $minerl->build();
    }
    when("serve") { 
        use HTTP::Server::Brick;
        my $server = HTTP::Server::Brick->new( host => "localhost", port => $opts->{"port"});
        $server->mount("/" => {"path" => $minerl->{"cfg"}->{"system"}->{"output_dir"}});
        $server->start()
    }
    when("createblog") {
        use POSIX qw(strftime);
        my $timestamp = time;
        my ($date) = strftime("%F %T", localtime $timestamp) =~ /([^ ]+) (.+)$/;
        
        my $opts = $go->opts;
        my $filename = $opts->{"filename"};
        my $layout = $opts->{"layout"};
        my $format = $opts->{"format"};
        my $tags = $opts->{"tags"};
        my $title = $opts->{"title"};

        my $headers = "---\n"
            . "title: $title\n"
            . "layout: $layout\n"
            . "format: $format\n"
            . "type: post\n"
            . "tags: $tags\n"
            . "timestamp: $timestamp\n"
            . "---\n\n";

        my $pageDir = $minerl->{"cfg"}->{"system"}->{"page_dir"};
        my $pageSubDir = $date;
        $pageSubDir =~ s|-|/|g;
        make_path("$pageDir/$pageSubDir", { mode => 0755 });
       
        my $finalFilePath = "$pageDir/$pageSubDir/$filename";

        if (-f $finalFilePath) {
            print "$finalFilePath exists, override it? <y/n>\n";
            my $answer = <STDIN>;
            chomp $answer;
            if (lc $answer ne "y") {
               exit 0;  
            }
        }

        open my $fh, ">:utf8", $finalFilePath or die "Failed to write to '$finalFilePath' - $!";
        binmode($fh, ":utf8");
        print $fh $headers;
        close $fh;
        
        print "Created: $finalFilePath\n";
    }
}

1;
